// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Petrova_Julia_KT_31.Database;

#nullable disable

namespace Petrova_Julia_KT_31.Migrations
{
    [DbContext(typeof(TeacherDbContext))]
    [Migration("20250425203031_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("academic_degree_id")
                        .HasComment("Идентификатор академической степени");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicDegreeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_academic_degree_name");

                    b.HasKey("AcademicDegreeId")
                        .HasName("pk_cd_academic_degree_academic_degree_id");

                    b.ToTable("cd_academic_degree", (string)null);
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discipline_id")
                        .HasComment("Идентификатор дисциплины");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_discipline_name")
                        .HasComment("Название дисциплины");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id")
                        .HasComment("Идентификатор преподавателя");

                    b.HasKey("DisciplineId")
                        .HasName("pk_cd_discipline_discipline_id");

                    b.HasIndex(new[] { "TeacherId" }, "idx_cd_discipline_fk_teacher_id");

                    b.ToTable("cd_discipline", (string)null);
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id")
                        .HasComment("Идентификатор должности");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_staff_name")
                        .HasComment("Название должности");

                    b.HasKey("StaffId")
                        .HasName("pk_cd_staff_staff_id");

                    b.ToTable("cd_staff", (string)null);
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacher_id")
                        .HasComment("Идентификатор преподавателя");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int?>("AcademicDegreeId")
                        .HasColumnType("int")
                        .HasColumnName("academicdegree_id")
                        .HasComment("Идентификатор ученой степени");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id")
                        .HasComment("Идентификатор кафедры");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_teacher_firstname")
                        .HasComment("Имя преподавателя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_teacher_lastname")
                        .HasComment("Фамилия преподавателя");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_teacher_middlename")
                        .HasComment("Отчество преподавателя");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id")
                        .HasComment("Идентификатор должности");

                    b.Property<int?>("WorkloadId")
                        .HasColumnType("int")
                        .HasColumnName("workload_id")
                        .HasComment("Идентификатор нагрузки");

                    b.HasKey("TeacherId")
                        .HasName("pk_cd_teacher_teacher_id");

                    b.HasIndex(new[] { "AcademicDegreeId" }, "idx_cd_teacher_fk_academicdegree_id");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_cd_teacher_fk_department_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_cd_teacher_fk_staff_id");

                    b.HasIndex(new[] { "WorkloadId" }, "idx_cd_teacher_fk_workload_id");

                    b.ToTable("cd_teacher", (string)null);
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Workload", b =>
                {
                    b.Property<int>("WorkloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("workload_id")
                        .HasComment("Идентификатор нагрузки на преподавателя");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkloadId"));

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("c_hours")
                        .HasComment("Количество часов");

                    b.HasKey("WorkloadId")
                        .HasName("pk_cd_workload_workload_id");

                    b.ToTable("cd_workload", (string)null);
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Discipline", b =>
                {
                    b.HasOne("Petrova_Julia_KT_31.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Petrova_Julia_KT_31.Models.Teacher", b =>
                {
                    b.HasOne("Petrova_Julia_KT_31.Models.AcademicDegree", "AcademicDegree")
                        .WithMany()
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_academicdegree_id");

                    b.HasOne("Petrova_Julia_KT_31.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_department_id");

                    b.HasOne("Petrova_Julia_KT_31.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_staff_id");

                    b.HasOne("Petrova_Julia_KT_31.Models.Workload", "Workload")
                        .WithMany()
                        .HasForeignKey("WorkloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_workload_id");

                    b.Navigation("AcademicDegree");

                    b.Navigation("Department");

                    b.Navigation("Staff");

                    b.Navigation("Workload");
                });
#pragma warning restore 612, 618
        }
    }
}
